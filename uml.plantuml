@startuml

package "Interface"  #DDDDDD {
    abstract Interface{
          get_data(self, query) -> Dict
          execute(self, query, value):
          insert_many(self, query, data):
          get_data_batch(self, batch_size=10, query=""):
    }
}

package "Logging Modules" #DDDDDD{
    class Logger{
        logger : Instance
    }
    class error_handling_with_logging {}
}



package "Database Modules"   #DDDDDD{
    class Settings{
            port
            server
            username
            password
            timeout
            database_name
    }
    class DatabaseAurora{
                 + get_data(self, query) -> Dict
                 + execute(self, query, value):
                 + insert_many(self, query, data):
                 + get_data_batch(self, batch_size=10, query=""):

    }
}


package "Client"{
     enum Connector{
        DB_AURORA_PSYCOPG2 = DatabaseAurora
    }
}

    Settings *-- DatabaseAurora : Has A
    error_handling_with_logging *--  DatabaseAurora: Has A
    Logger *-- DatabaseAurora : Has A
    Interface <-- DatabaseAurora  : Inherits
    DatabaseAurora *-- Connector: Has A

@enduml